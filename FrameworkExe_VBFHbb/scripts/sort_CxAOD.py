#!/usr/bin/python

import os, math, sys
from optparse import OptionParser

sample_list = {
# sample                  1st match   2nd match
"data":                ["physics_Main", ],
"dijet":               ["jetjet_JZ", ],
"ZeeB":                ["Sh_Zee", "BFilter", ],
"ZeeC":                ["Sh_Zee", "CFilterBVeto", ],
"ZeeL":                ["Sh_Zee", "CVetoBVeto", ],
"ZmumuB":              ["Sh_Zmumu", "BFilter", ],
"ZmumuC":              ["Sh_Zmumu", "CFilterBVeto", ],
"ZmumuL":              ["Sh_Zmumu", "CVetoBVeto", ],
"ZtautauB":            ["Sh_Ztautau", "BFilter", ],
"ZtautauC":            ["Sh_Ztautau", "CFilterBVeto", ],
"ZtautauL":            ["Sh_Ztautau", "CVetoBVeto", ],
"ZnunuB":              ["Sh_Znunu", "BFilter", ],
"ZnunuC":              ["Sh_Znunu", "CFilterBVeto", ],
"ZnunuL":              ["Sh_Znunu", "CVetoBVeto", ],
"WenuB":               ["Sh_Wenu", "BFilter", ],
"WenuC":               ["Sh_Wenu", "CFilterBVeto", ],
"WenuL":               ["Sh_Wenu", "CVetoBVeto", ],
"WmunuB":              ["Sh_Wmunu", "BFilter", ],
"WmunuC":              ["Sh_Wmunu", "CFilterBVeto", ],
"WmunuL":              ["Sh_Wmunu", "CVetoBVeto", ],
"WtaunuB":             ["Sh_Wtaunu","BFilter", ],
"WtaunuC":             ["Sh_Wtaunu", "CFilterBVeto", ],
"WtaunuL":             ["Sh_Wtaunu", "CVetoBVeto", ],
"ttbar":               ["ttbar", "allhad.", ],
"ttbar_add":           ["ttbar", "allhad_WpT", ],
"singletop_t":         ["P2012_singletop_tchan", ],
"singletop_t_Syst":    ["_singletop_tchan", "rad", ],
"singletop_s":         ["Schan", ],
"singletop_s_Syst":    ["Schan", "rad", ],
"singletop_Wt":        ["P2012_Wt_inclusive", ],
"singletop_Wt_dilep":  ["P2012_Wt_dilepton", ],
"singletop_Wt_Syst":   ["P2012_Wt_DS_", ],
"ZHvv125":             ["ZH125_nunubb", ], ##
"ZHvv125":             ["ZvvH125_bb", ],
"ZHvv125":             ["ggZH125", "vevebb", ],
"ZHvv125":             ["ggZH125", "vmuvmubb", ],
"ZHvv125":             ["ggZH125", "vtauvtaubb", ],
"ZHll125":             ["ZH125_llbb", ], ##
"ZHll125":             ["ggZH125", "eebb", ],
"ZHll125":             ["ggZH125", "mumubb", ],
"ZHll125":             ["ggZH125", "tautaubb", ],
"ZHll125":             ["ZllH125_bb", ],
"WH125":               ["WH125_lnubb", ], ##
"WH125":               ["WlvH125_bb", ],
"ZHvv125J_MINLO":      ["ZH125J_MINLO_v", ], ##
"ZHvv125J_MINLO":      ["ggZH125_vevebb", "NLO", ],
"ZHvv125J_MINLO":      ["ggZH125_vmuvmubb", "NLO", ],
"ZHvv125J_MINLO":      ["ggZH125_vtauvtaubb", "NLO", ],
"WHlv125J_MINLO":      ["WpH125J_MINLO",  "", ],
"WHlv125J_MINLO":      ["WmH125J_MINLO",  "", ],
"ZHll125J_MINLO":      ["ZH125J_MINLO_ee",  "", ],
"ZHll125J_MINLO":      ["ZH125J_MINLO_mumu",  "", ],
"ZHll125J_MINLO":      ["ZH125J_MINLO_tautau",  "", ],
"ZHll125J_MINLO":      ["ggZH125_eebb", "NLO", ],
"ZHll125J_MINLO":      ["ggZH125_mumubb", "NLO", ],
"ZHll125J_MINLO":      ["ggZH125_tautaubb", "NLO", ],
"WW":                  ["WplvWmqq", ],
"WW":                  ["WmlvWpqq", ],
"WW":                  ["WpqqWmlv", ],
"WW":                  ["WmqqWplv", ],
"WW_Pw":               ["WWlvqq", "PwPy8EG", ],
"WW_Pw":               ["WWlvlv", "PwPy8EG", ],
"WZ":                  ["WlvZqq", ],
"WZ":                  ["WqqZll", ],
"WZ":                  ["WqqZvv", ],
"WZ_Pw":               ["WZqqll", "PwPy8EG", ],
"WZ_Pw":               ["WZqqvv", "PwPy8EG", ],
"WZ_Pw":               ["WZlvqq", "PwPy8EG", ],
"WZ_Pw":               ["WZlvll", "PwPy8EG", ],
"WZ_Pw":               ["WZlvvv", "PwPy8EG", ],
"ZZ":                  ["ZqqZll", ],
"ZZ":                  ["ZqqZvv", ],
"ZZ_Pw":               ["ZZqqll", "PwPy8EG", ],
"ZZ_Pw":               ["ZZllll", "PwPy8EG", ],
"ZZ_Pw":               ["ZZvvll", "PwPy8EG", ],
"ZZ_Pw":               ["ZZvvvv", "PwPy8EG", ],
"ggA":                 ["_ggA", ],
"HVT":                 ["_HVT", ],
"monoHbb":             ["_monoHbb", ],
"monoWjj":             ["_monoWjj", ],
"monoZjj":             ["_monoZjj", ],
"ExcitedQ":            ["_ExcitedQ", ],
"HZZllqq":             ["ZZllqq", ],
"HZZvvqq":             ["ZZvvqq", ],
"Zee_MG":              ["MGPy8EG_A14NNPDF23LO_Zee", ],
"Zmumu_MG":            ["MGPy8EG_A14NNPDF23LO_Zmumu", ],
"Ztautau_MG":          ["MGPy8EG_A14NNPDF23LO_Ztautau", ],
"Znunu_MG":            ["MGPy8EG_A14NNPDF23LO_Znunu", ],
"Wenu_MG":             ["MGPy8EG_A14NNPDF23LO_Wenu", ],
"Wmunu_MG":            ["MGPy8EG_A14NNPDF23LO_Wmunu", ],
"Wtaunu_MG":           ["MGPy8EG_A14NNPDF23LO_Wtaunu", ],
"Wenu_Pw":             ["PwPy8EG_AZNLOCTEQ6L1_Wplusenu", ],
"Wenu_Pw":             ["PwPy8EG_AZNLOCTEQ6L1_Wminusenu", ],
"Wmunu_Pw":            ["PwPy8EG_AZNLOCTEQ6L1_Wplusmunu", ],
"Wmunu_Pw":            ["PwPy8EG_AZNLOCTEQ6L1_Wminusmunu", ],
"Wtaunu_Pw":           ["PwPy8EG_AZNLOCTEQ6L1_Wplustaunu", ],
"Wtaunu_Pw":           ["PwPy8EG_AZNLOCTEQ6L1_Wminustaunu", ],
"Zee_Pw":              ["PwPy8EG_AZNLOCTEQ6L1_Zee", ],
"Zmumu_Pw":            ["PwPy8EG_AZNLOCTEQ6L1_Zmumu", ],
"Ztautau_Pw":          ["PwPy8EG_AZNLOCTEQ6L1_Ztautau", ],
}

MC15b_only = ['343500', '343501', '343502', '343503', '343504', '343505', '343506', '343507', '343508', '343509', '343510', '343511', '343512', '343513', '343514', '343515', '343516', '343517', '343518', '343519', '343520', '343521', '343522', '343523', '343524', '343525', '343526', '343527', '343528', '343529', '343530', '343531', '343532', '343533', '343534', '343535', '343536', '343537', '343538', '343539', '343541', '343542', '343543', '343545', '343546', '343547', '343548', '343549', '343550', '343551', '343552', '343553', '343554', '343555', '343556', '343557', '343558', '343559', '343560', '343561', '343562', '343563', '343564', '343565', '343566', '343534', '343546', '343566', '361300', '361301', '361302', '361303', '361304', '361305', '361306', '361307', '361308', '361309', '361310', '361311', '361312', '361313', '361314', '361315', '361316', '361317', '361318', '361319', '361320', '361321', '361322', '361323', '361324', '361325', '361326', '361327', '361328', '361329', '361330', '361331', '361332', '361333', '361334', '361335', '361336', '361337', '361338', '361339', '361340', '361341', '361342', '361343', '361344', '361345', '361346', '361347', '361348', '361349', '361350', '361351', '361352', '361353', '361354', '361355', '361356', '361357', '361358', '361359', '361360', '361361', '361362', '361363', '361364', '361365', '361366', '361367', '361368', '361369', '361370', '361371', '361372', '361373', '361374', '361375', '361376', '361377', '361378', '361379', '361380', '361381', '361382', '361383', '361384', '361385', '361386', '361387', '361388', '361389', '361390', '361391', '361392', '361393', '361394', '361395', '361396', '361397', '361398', '361399', '361400', '361401', '361402', '361403', '361404', '361405', '361406', '361407', '361408', '361409', '361410', '361411', '361412', '361413', '361414', '361415', '361416', '361417', '361418', '361419', '361420', '361421', '361422', '361423', '361424', '361425', '361426', '361427', '361428', '361429', '361430', '361431', '361432', '361433', '361434', '361435', '361436', '361437', '361438', '361439', '361440', '361441', '361442', '361443', '361444', '361445', '361446', '361447', '361448', '361449', '361450', '361451', '361452', '361453', '361454', '361455', '361456', '361457', '361458', '361459', '361460', '361461', '361462', '361463', '361464', '361465', '361466', '361467', '363364', '363365', '363366', '363367', '363368', '363369', '363370', '363371', '363372', '363373', '363374', '363376', '363377', '363378', '363379', '363380', '363381', '363382', '363383', '363384', '363385', '363386', '363387', '363388', '363389', '363390', '363391', '363392', '363394', '363395', '363397', '363401', '363402', '363403', '363404', '363405', '363406', '363407', '363409', '363410', '363411', '363412', '363413', '363415', '363416', '363420', '363421', '363422', '363423', '363424', '363425', '363426', '363428', '363429', '363430', '363431', '363432', '363433', '363434', '363435', '361500', '361502', '361503', '361504', '361505', '361507', '361508', '361509', '361510', '361511', '361512', '361513', '361514', '361515', '361516', '361517', '361518', '361519', '361523', '361524', '361528', '361529', '361530', '361531', '361532', '361533', '361534', '361600', '361600', '361606', '361606', '361601', '361602', '361607', '361608', '361609', '361603', '361604', '361605', '361610', '361611', '410000', '410001', '410002', '410003', '410011', '410012', '410013', '410014', '410015', '410016', '410064', '410065', '410025', '410026', '361020', '361021', '361022', '361023', '361024', '361025', '361026', '361027', '361028', '361029', '361030', '361031', '361032']

MC15a_only = ['302116', '302117', '302118', '302119', '302120', '302121', '302122', '302123', '302124', '302125', '302126', '302127', '302128', '302129', '302130', '302131', '302131', '302132', '302133', '302134', '302135', '302136', '302137', '302138', '302139', '302140', '302181', '302181', '302191', '302192', '302193', '302194', '302195', '302196', '302197', '302198', '302199', '302200', '302201', '302202', '302203', '302204', '302205', '302206', '302207', '302208', '302209', '302210', '302211', '302212', '302213', '302214', '302215', '302241', '302242', '302243', '302244', '302245', '302246', '302247', '302248', '302249', '302250', '302251', '302252', '302253', '302254', '302255', '302256', '302257', '302258', '302259', '302260', '302261', '302262', '302263', '302264', '302265', '302281', '302281', '302341', '302342', '302343', '302344', '302345', '302346', '302347', '302348', '302349', '302350', '302351', '302352', '302353', '302354', '302355', '302356', '302357', '302358', '302359', '302360', '302361', '302362', '302363', '302364', '302365', '302391', '302392', '302393', '302394', '302395', '302396', '302397', '302398', '302399', '302400', '302401', '302402', '302403', '302404', '302405', '302406', '302407', '302408', '302409', '302410', '302411', '302412', '302413', '302414', '302415', '302416', '302417', '302418', '302419', '302420', '302421', '302422', '302423', '302424', '302425', '302426', '302427', '302428', '302429', '302430', '302431', '302431', '302432', '302433', '302434', '302435', '302436', '302437', '302438', '302439', '302440', '341094', '341095', '341096', '341097', '341098', '341099', '341100', '341101', '341102', '341312', '341313', '341314', '341315', '341316', '341317', '341318', '341319', '341320', '341321', '341322', '341323', '341324', '341325', '341326', '341327', '341328', '341329', '341330', '341331', '341332', '341333', '341334', '341335', '341336', '341337', '341338', '341339', '341340', '341341', '341342', '341343', '341344', '341345', '341346', '341347', '341348', '341349', '341412', '341732', '341733', '341734', '341735', '341736', '341737', '341738', '341739', '341740', '341741', '341742', '341743', '341937', '341938', '343008', '343009', '343010', '343011', '343012', '343013', '343014', '343015', '343016', '343017', '343018', '343019', '343020', '343021', '343022', '343023', '343024', '343025', '343026', '343027', '343028', '343029', '343030', '343031', '343032', '343033', '343034', '343035', '343036', '343037', '343038', '343039', '343040', '343041', '343042', '343043', '343044', '343045', '343046', '343047', '343048', '343049', '343050', '343051', '343052', '343053', '343054', '343055', '343056', '343057', '343058', '343059', '343060', '343061', '303894', '303895', '303896', '303897', '303898', '303899', '303900', '303901', '303902', '303903', '303904', '303905', '303906', '303907', '303908', '303909', '303910', '303911', '303912', '303913', '303914', '303915', '303916', '303917', '303918', '303919', '303920', '303921', '303922', '303923', '303924', '303925', '303926', '303927', '303928', '303929', '303930', '303931', '303932', '303933', '303934', '303935', '303936', '303937', '303938', '303939', '303940', '303941', '303942', '303943', '303944', '303945', '303946', '303947', '303948', '303949', '303950', '303951', '303952', '303953', '303954', '303955', '303956', '303957', '303958', '303959', '303960', '303961', '303962', '303963', '303964', '303965', '303966', '303967', '303968', '303969', '303970', '303971', '303972', '303973', '303974', '303975', '303976', '303977', '303978', '303979', '303980', '303981', '303982', '303983', '303984', '303985', '303986', '303987', '303988', '303989', '303990', '303991', '303992', '303993', '303994', '303995', '303996', '303997', '303998', '303999', '304000', '304001', '304002', '304003', '304004', '304005', '304006', '304007', '304008', '304009', '304010', '304011', '304012', '304013', '304055', '304057', '304058', '304059', '304060', '304061', '304062', '304063', '304064', '304065', '304066', '304067', '304068', '304069', '304071', '304072', '304073', '304074', '304075', '304076', '304077', '304079', '304080', '304082', '304083', '304084', '304086', '304087', '304088', '304089', '304090', '304091', '304092', '304093', '304094', '304096', '304098', '304100', '304101', '304103', '304104', '304106', '304107', '304108', '304109', '304110', '304111', '304113', '304114', '304116', '304117', '304118', '304119', '304120', '304121', '304125', '361081', '361082', '361083', '361084', '361085', '361086', '361087', '410004', '410006', '410017', '410018', '410019', '410020', '410062', '410063', '410107', '410108', '410109', '410110']

def main(opts, args):

    input_dir = os.path.abspath(args[0])
    output_dir = os.path.abspath(args[1])

    print "Input directory:   %s" % input_dir
    print "Output directory:  %s" % output_dir

    for old_dir, dirs, files in os.walk(input_dir) :

        sample = None
        for key in sample_list:
            if all(x in old_dir for x in sample_list[key]):
                sample = key
                break

        if not sample: continue

        if opts.mc15a:
            if not any(x in old_dir for x in MC15a_only):
                continue

        if opts.mc15b:
            if not any(x in old_dir for x in MC15b_only):
                continue

        dataset = os.path.basename(old_dir)
        new_dir = os.path.join(output_dir, sample) # works only for non-eos?
        new_link = os.path.join(new_dir, dataset)

        if not opts.quiet: print "%s -> %s" % (dataset, new_dir)

        if opts.symlink:
            if not os.path.exists(new_dir):  os.mkdir(new_dir)
            if not os.path.exists(new_link): os.symlink(old_dir, new_link)

        if opts.copy:
            if not os.path.exists(new_dir):  os.mkdir(new_dir)
            if not os.path.exists(new_link): os.system("cp -rav %s %s" % (old_dir, new_link))

        # not tested
        if opts.xrdcp:
            for f in files:
                os.system("xrdcp %s %s/%s/%s/%s" %  (old_dir, output_dir, sample, dataset, f))

        if opts.move:
            if not os.path.exists(new_dir):  os.mkdir(new_dir)
            if not os.path.exists(new_link): os.system("mv %s %s" % (old_dir, new_link))

    if not any([opts.symlink, opts.copy, opts.xrdcp, opts.move]):
        print "No option for action was given (symlink, copy, xrdcp, move). Testing only."

if __name__ == "__main__":

    # parse command line input
    parser = OptionParser("usage: %prog [options] inputdir outputdir")
    parser.add_option("-q", "--quiet",      action="store_true",     default=False, dest="quiet",       help="No print out. Default=%default")
    parser.add_option("-s", "--symlink",    action="store_true",     default=False, dest="symlink",    help="Create symbolic link at target. Default=%default")
    parser.add_option("-c", "--copy",       action="store_true",     default=False, dest="copy",       help="Copy folders using cp. Default=%default")
    parser.add_option("-m", "--move",       action="store_true",     default=False, dest="move",       help="Move folders. Default=%default")
    parser.add_option("-x", "--xrdcp",      action="store_true",     default=False, dest="xrdcp",      help="Copy folders using xrdcp for eos. Default=%default")
    parser.add_option("", "--mc15a",        action="store_true",     default=False, dest="mc15a",      help="Only process MC15a. Default=%default")
    parser.add_option("", "--mc15b",        action="store_true",     default=False, dest="mc15b",      help="Only process MC15b. Default=%default")

    opts, args = parser.parse_args()

    main(opts, args)
